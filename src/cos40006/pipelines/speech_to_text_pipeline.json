import aiko_services as aiko
import speech_recognition as sr
import logging
from typing import Tuple

# Initialize logging for this script
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ElementDefinition:
    """ Mimic the structure expected for element definitions. """
    def __init__(self, input, output):
        self.input = input
        self.output = output

class SpeechToTextElement(aiko.PipelineElement):
    def __init__(self, context):
        super().__init__()
        self.definition = ElementDefinition(
            input=[{'name': 'audio_input', 'type': 'audio'}],
            output=[{'name': 'recognized_text', 'type': 'str'}]
        )
        self.recognizer = sr.Recognizer()
        logger.info("speech_to_text has been initialized")

    def process_frame(self, stream, frame=None, **kwargs) -> Tuple[aiko.StreamEvent, dict]:
        try:
            with sr.Microphone() as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                logger.info("Listening for speech...")
                audio_data = self.recognizer.listen(source, timeout=10, phrase_time_limit=10)
                logger.info("Captured Speech")

                recognized_text = self.recognizer.recognize_google(audio_data)
                logger.info(f"Recognized Speech: {recognized_text}")

                if recognized_text.lower() in ["stop", "quit"]:
                    return aiko.StreamEvent.OKAY, {"recognized_text": "Exiting loop"}

                return aiko.StreamEvent.OKAY, {"recognized_text": recognized_text}

        except sr.WaitTimeoutError:
            logger.info("User inactive for too long.")
            return aiko.StreamEvent.ERROR, {"recognized_text": "Timeout - User Inactive"}
        except sr.UnknownValueError:
            logger.info("Could not understand the audio.")
            return aiko.StreamEvent.ERROR, {"recognized_text": "Unknown Value"}
        except sr.RequestError as e:
            logger.error(f"Google Web API error: {e}")
            return aiko.StreamEvent.ERROR, {"recognized_text": f"Error: {e}"}

    def recognize_speech(self):
        """Helper method for external calls to recognize speech."""
        stream = {"stream_id": "*"}
        result_event, result_data = self.process_frame(stream)
        return result_data

# Required method for Aiko framework
def get_implementations():
    return {"SpeechToTextElement": SpeechToTextElement}
